/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/pointing.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <27>; };

/ {
    behaviors {
        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "tap-preferred";
        };

        bs_del: bs_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BS_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        nav_hm_mkp: nav_hm_mkp {
            compatible = "zmk,behavior-hold-tap";
            label = "NAV_HM_MKP";
            bindings = <&mkp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "tap-preferred";
        };

        nav_hm_mmv: nav_hm_mmv {
            compatible = "zmk,behavior-hold-tap";
            label = "NAV_HM_MMV";
            bindings = <&mmv>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "tap-preferred";
        };

        nav_mouse_up: nav_mouse_up {
            compatible = "zmk,behavior-mod-morph";
            label = "NAV_MOUSE_UP";
            bindings = <&nav_hm_mmv MOVE_UP UP_ARROW>, <&mkp MB1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        tri_layer {
            bindings = <&to 3>;
            key-positions = <37 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | LWR | ENT |   | SPC | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q  &kp W  &kp E                 &kp R           &kp T             &kp Y    &kp U  &kp I       &kp O    &kp P     &bs_del
&caps_word  &kp A  &kp S  &hm LCTRL D           &hm LEFT_ALT F  &hm LEFT_GUI G    &kp H    &kp J  &kp K       &kp L    &kp SEMI  &kp SQT
&kp LSHFT   &kp Z  &kp X  &kp C                 &kp V           &kp B             &kp N    &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp RSHFT
                          &kp LS(LA(LC(LGUI)))  &to 1           &kp SPACE         &kp RET  &to 2  &kp ESCAPE
            >;
        };

        NAV {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1    |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | LCTRL| BTCLR | BT0 | BT1 | BT2 | BT3 |   | LFT | DWN |  UP | RGT |     |      |
            // | ESC  |       | HOME| PGUP| PGDN| END |   |     |     |     |     |     |      |
            //                      | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1         &kp N2              &kp N3                &kp N4        &kp N5       &kp N6            &kp N7             &kp N8                      &kp N9                            &kp N0                        &bs_del
&caps_word  &trans         &hm PG_UP UP_ARROW  &kp LCTRL             &kp LEFT_ALT  &kp LGUI     &mkp LCLK  &nav_mouse_up  &mkp RCLK                   &nav_mouse_up                     &mkp RCLK                     &kp NON_US_BACKSLASH
&kp LSHIFT  &hm HOME LEFT  &hm PG_DN DOWN      &hm END RIGHT         &trans        &trans       &nav_hm_mmv MOVE_LEFT LEFT         &nav_hm_mmv MOVE_DOWN DOWN_ARROW         &nav_hm_mmv MOVE_RIGHT RIGHT  &kp COMMA  &kp PERIOD  &kp RIGHT_SHIFT
                                               &kp LS(LA(LC(LGUI)))  &to 0         &kp SPACE    &kp RET           &trans             &kp ESC
            >;
        };

        SYMB {
            // -----------------------------------------------------------------------------------------
            // |  TAB |   !   |   @   |   #   |   $   |   %   |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |RGB_TOG|RGB_HUI|RGB_SAI|RGB_VAI|       |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |RGB_MOD|RGB_HUD|RGB_SAD|RGB_VAD|QK_BOOT|   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                            | GUI |     |  SPC  |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp EXCL  &kp AT  &kp HASH              &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &bs_del
&caps_word  &trans    &trans  &trans                &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT   &trans    &trans  &trans                &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                              &kp LS(LA(LC(LGUI)))  &to 0     &kp SPACE    &kp RET    &trans     &kp ESC
            >;
        };

        CTRL {
            bindings = <
&kp TAB         &bt BT_CLR_ALL   &bt BT_SEL 0     &bt BT_SEL 1          &bt BT_SEL 2     &bt BT_SEL 3    &trans   &trans  &trans   &trans  &trans  &bs_del
&caps_word      &rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI       &rgb_ug RGB_BRI  &trans          &trans   &trans  &trans   &trans  &trans  &trans
&kp LEFT_SHIFT  &rgb_ug RGB_EFF  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD       &rgb_ug RGB_BRD  &trans          &trans   &trans  &trans   &trans  &trans  &trans
                                                  &kp LA(LS(LC(LGUI)))  &to 0            &kp SPACE       &kp RET  &trans  &kp ESC
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
